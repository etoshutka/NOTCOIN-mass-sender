#include "imports/stdlib.fc";

const int ton_for_fee = 50000000;

const int op::start_sending = 0x87654321;
const int op::process_messages = 0x23456789;
const int op::set_jetton_wallet_code = 0x54321678;
const int op::excesses = 0xd53276db;
const int op::withdraw_remaining = 0x12345678;

const int STATUS_SIZE = 4;

slice helper::addr_none() asm "b{00} PUSHSLICE";

int workchain() asm "0 PUSHINT";

(int, int, int, int, int, int, slice, cell, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(64),    ;; seed
        ds~load_coins(),     ;; total
        ds~load_uint(16),    ;; length
        ds~load_uint(16),    ;; last_key
        ds~load_uint(1),     ;; initiated
        ds~load_uint(1),     ;; ready_to_send
        ds~load_msg_addr(),  ;; admin
        ds~load_dict(),      ;; messages
        ds~load_msg_addr(),  ;; jetton_master
        ds~load_ref()        ;; jetton_wallet_code
    );
}

() save_data(int seed, int total, int length, int last_key, int initiated, int ready_to_send, slice admin, cell messages, slice jetton_master, cell jetton_wallet_code) impure inline {
    set_data(begin_cell()
        .store_uint(seed, 64)
        .store_coins(total)
        .store_uint(length, 16)
        .store_uint(last_key, 16)
        .store_uint(initiated, 1)
        .store_uint(ready_to_send, 1)
        .store_slice(admin)
        .store_dict(messages)
        .store_slice(jetton_master)
        .store_ref(jetton_wallet_code)
    .end_cell());
}
builder pack_jetton_wallet_data_builder(int status, int balance, slice owner_address, slice jetton_master_address) inline {
    return begin_cell()
        .store_uint(status, STATUS_SIZE)
        .store_coins(balance)
        .store_slice(owner_address)
        .store_slice(jetton_master_address);
}

cell pack_jetton_wallet_data(int status, int balance, slice owner_address, slice jetton_master_address) inline {
    return pack_jetton_wallet_data_builder(status, balance, owner_address, jetton_master_address)
           .end_cell();
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return begin_cell()
    .store_uint(0, 2)
    .store_maybe_ref(jetton_wallet_code)
    .store_maybe_ref(
        pack_jetton_wallet_data(
            0, ;; status
            0, ;; balance
            owner_address,
            jetton_master_address)
    )
    .store_uint(0, 1)
    .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell()
    .store_uint(4, 3)
    .store_int(workchain(), 8)
    .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) inline {
    return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}
() send_jetton(slice dest, int value, slice jetton_master_address, cell jetton_wallet_code, slice admin) impure inline {
    slice jetton_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_master_address, jetton_wallet_code);
    
 cell transfer_body = begin_cell()
        .store_uint(0x0f8a7ea5, 32) ;; transfer op
        .store_uint(0, 64) ;; query_id
        .store_coins(value)
        .store_slice(dest)
        .store_slice(admin)
        .store_uint(0, 1) ;; no forward_payload
        .store_coins(10000) ;; forward_ton_amount
        .store_uint(0, 1) ;; no custom_payload
        .end_cell();

    send_raw_message(begin_cell()
        .store_uint(0x10, 6) ;; unbounce
        .store_slice(jetton_wallet)
        .store_coins(ton_for_fee)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(transfer_body)
        .end_cell(), 1);    
}

() send_excesses(slice dest) impure inline {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(dest)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
        .store_slice("Excesses")
    .end_cell(), 128);
}

() process_messages(int msg_value, slice sender) impure {
    (int seed, int total, int length, int last_key, int initiated, int ready_to_send, slice admin, cell messages, slice jetton_master, cell jetton_wallet_code) = load_data();

    throw_unless(105, ready_to_send != 0);
    throw_if(106, jetton_wallet_code.cell_null?());

    if (initiated == 0) {
        throw_if(101, msg_value < ton_for_fee * (length + (length + 253) / 254));
        initiated = 1;
    } else {
        throw_unless(100, equal_slices(sender, my_address()) | equal_slices(sender, admin));
    }

    accept_message();

    (last_key, slice val, int f?) = messages.udict_get_next?(16, last_key);

    repeat (min(254, length)) {
        if (f?) {
            int value = val~load_coins();
            slice dest = val~load_msg_addr();
            send_jetton(dest, value, jetton_master, jetton_wallet_code, admin);
            (last_key, val, f?) = messages.udict_get_next?(16, last_key);
        }
    }
    
    if (~ f?) {
        save_data(seed, total, 0, 0, initiated, ready_to_send, admin, messages, jetton_master, jetton_wallet_code);
        send_excesses(admin);
    } else {
        save_data(seed, total, length - 254, last_key - 1, initiated, ready_to_send, admin, messages, jetton_master, jetton_wallet_code);
        send_raw_message(begin_cell()
            .store_uint(0x10, 6)
            .store_slice(my_address())
            .store_coins(ton_for_fee)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell(), 1);
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender = cs~load_msg_addr();
    
    (int seed, int total, int length, int last_key, int initiated, int ready_to_send, slice admin, cell messages, slice jetton_master, cell jetton_wallet_code) = load_data();

    if (in_msg_body.slice_empty?()) {
        return ();
    }

    int op = in_msg_body~load_uint(32);

    if (op == op::start_sending) {
        throw_unless(104, equal_slices(sender, admin));
        ready_to_send = 1;
        save_data(seed, total, length, last_key, initiated, ready_to_send, admin, messages, jetton_master, jetton_wallet_code);
        return ();
    }

    if (op == op::process_messages) {
        throw_unless(105, ready_to_send != 0);
        process_messages(msg_value, sender);
        return ();
    }

     if (op == op::withdraw_remaining) {
        throw_unless(104, equal_slices(sender, admin));
        throw_unless(105, ready_to_send != 0);

        int amount = in_msg_body~load_coins();
      
        slice jetton_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_master, jetton_wallet_code);
        
        
        cell transfer_body = begin_cell()
            .store_uint(0x0f8a7ea5, 32) ;; transfer op
            .store_uint(0, 64) ;; query_id
            .store_coins(amount) ;; amount 
            .store_slice(admin)
            .store_slice(admin)
            .store_uint(0, 1) ;; no forward_payload
            .store_coins(0) ;; forward_ton_amount
            .store_uint(0, 1) ;; no custom_payload
            .end_cell();

        send_raw_message(begin_cell()
            .store_uint(0x10, 6) ;; unbounce
            .store_slice(jetton_wallet)
            .store_coins(ton_for_fee)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(transfer_body)
            .end_cell(), 1);

        return ();
    }

    if (op == op::set_jetton_wallet_code) {
        throw_unless(104, equal_slices(sender, admin));
        cell new_jetton_wallet_code = in_msg_body~load_ref();
        save_data(seed, total, length, last_key, initiated, ready_to_send, admin, messages, jetton_master, new_jetton_wallet_code);
        return ();
    }
}

(int) has_finished() method_id {
    (int seed, int total, int length, int last_key, int initiated, int ready_to_send, slice admin, cell messages, slice jetton_master, cell jetton_wallet_code) = load_data();
    return (length == 0);
}

(int) is_ready_to_send() method_id {
    (int seed, int total, int length, int last_key, int initiated, int ready_to_send, slice admin, cell messages, slice jetton_master, cell jetton_wallet_code) = load_data();
    return ready_to_send;
}